{"version":3,"sources":["components/Filter/Filter.module.scss","components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/ContactForm/ContactForm.js","components/ContactList/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","nameInputId","shortid","generate","numberInputId","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","className","s","form","this","label","htmlFor","input","type","pattern","title","required","onChange","id","button","Component","Contact","contact","onDeleteContact","onClick","ContactList","contacts","length","noContacts","item","map","list","Filter","App","filter","addContact","newContacts","find","toLowerCase","alert","deleteContacts","contactsId","prevState","changeFilter","getFilteredContacts","normalizedFilter","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,MAAQ,wB,kBCAxDD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,OAAS,8B,4DCAlID,EAAOC,QAAU,CAAC,KAAO,0BAA0B,WAAa,gCAAgC,KAAO,0BAA0B,OAAS,8B,qLCI7HC,EAAb,4MAKEC,MAAQ,CACNC,KAAM,GACNC,OAAQ,IAPZ,EAUEC,YAAcC,IAAQC,WAVxB,EAWEC,cAAgBF,IAAQC,WAX1B,EAaEE,aAAe,SAAAC,GACb,MAAwBA,EAAEC,OAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBV,EAAOS,KAf5B,EAkBEE,aAAe,SAAAJ,GACbA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKf,OACzB,EAAKgB,SArBT,EAwBEA,MAAQ,WACN,EAAKL,SAAS,CAAEV,KAAM,GAAIC,OAAQ,MAzBtC,4CA4BE,WACE,OACE,uBAAMe,UAAWC,IAAEC,KAAMJ,SAAUK,KAAKR,aAAxC,UACE,wBAAOK,UAAWC,IAAEG,MAAOC,QAASF,KAAKjB,YAAzC,iBAEE,uBACEc,UAAWC,IAAEK,MACbC,KAAK,OACLvB,KAAK,OACLS,MAAOU,KAAKpB,MAAMC,KAClBwB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,SAAUR,KAAKb,aACfsB,GAAIT,KAAKjB,iBAGb,wBAAOc,UAAWC,IAAEG,MAAOC,QAASF,KAAKd,cAAzC,mBAEE,uBACEW,UAAWC,IAAEK,MACbC,KAAK,MACLvB,KAAK,SACLS,MAAOU,KAAKpB,MAAME,OAClBuB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,SAAUR,KAAKb,aACfsB,GAAIT,KAAKd,mBAGb,wBAAQW,UAAWC,IAAEY,OAAQN,KAAK,SAAlC,gCA3DR,GAAiCO,a,gBCgBlBC,EAnBC,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACd,qCACE,iCACGD,EAAQhC,KADX,KACmBgC,EAAQ/B,UAE3B,wBAAQe,UAAWC,IAAEY,OAAQN,KAAK,SAASW,QAASD,EAApD,wBCmBWE,MAtBf,YAAqD,IAA9BC,EAA6B,EAA7BA,SAAUH,EAAmB,EAAnBA,gBAC/B,OAA2B,IAApBG,EAASC,OACd,qBAAKrB,UAAWC,IAAEqB,WAAlB,mCAEA,oBAAItB,UAAWC,IAAEsB,KAAjB,SACGH,EAASI,KAAI,SAAAR,GAAO,OACnB,oBAAIhB,UAAWC,IAAEwB,KAAjB,SACE,cAAC,EAAD,CACET,QAASA,EACTC,gBAAiB,kBAAMA,EAAgBD,EAAQJ,QAHvBI,EAAQJ,U,iBCiB7Bc,MAxBf,YAAsC,IAApBjC,EAAmB,EAAnBA,MAAOkB,EAAY,EAAZA,SACvB,OACE,mCACE,wBAAOX,UAAWC,IAAEG,MAApB,iCAEE,uBACEJ,UAAWC,IAAEK,MACbC,KAAK,OACLvB,KAAK,OACLwB,QAAQ,yHACRC,MAAM,yIACNhB,MAAOA,EACPkB,SAAUA,UCRdgB,E,4MACJ5C,MAAQ,CACNqC,SAAU,GACVQ,OAAQ,I,EAkBVC,WAAa,YAAuB,IAApB7C,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACZmC,EAAa,EAAKrC,MAAlBqC,SACFU,EAAc,CAClBlB,GAAIzB,IAAQC,WACZJ,OACAC,UAGFmC,EAASW,MACP,SAAAf,GAAO,OAAIc,EAAY9C,KAAKgD,gBAAkBhB,EAAQhC,KAAKgD,iBAEzDC,MAAM,GAAD,OAAIH,EAAY9C,KAAhB,4BACL,EAAKU,UAAS,gBAAG0B,EAAH,EAAGA,SAAH,MAAmB,CAC/BA,SAAS,CAAEU,GAAH,mBAAmBV,S,EAInCc,eAAiB,SAAAC,GACf,EAAKzC,UAAS,SAAA0C,GAAS,MAAK,CAC1BhB,SAAUgB,EAAUhB,SAASQ,QAAO,SAAAZ,GAAO,OAAIA,EAAQJ,KAAOuB,U,EAIlEE,aAAe,SAAA9C,GACb,EAAKG,SAAS,CAAEkC,OAAQrC,EAAEC,OAAOC,S,EAGnC6C,oBAAsB,WACpB,MAA6B,EAAKvD,MAA1B6C,EAAR,EAAQA,OAAQR,EAAhB,EAAgBA,SACVmB,EAAmBX,EAAOI,cAChC,OAAOZ,EAASQ,QAAO,SAAAZ,GAAO,OAC5BA,EAAQhC,KAAKgD,cAAcQ,SAASD,O,uDA9CxC,WACE,IAAMnB,EAAWqB,aAAaC,QAAQ,YAChCC,EAAiBC,KAAKC,MAAMzB,GAE9BuB,GACFxC,KAAKT,SAAS,CAAE0B,SAAUuB,M,gCAI9B,SAAmBP,EAAWU,GACxB3C,KAAKpB,MAAMqC,WAAagB,EAAUhB,UACpCqB,aAAaM,QAAQ,WAAYH,KAAKI,UAAU7C,KAAKpB,MAAMqC,a,oBAuC/D,WACE,IAAQQ,EAAWzB,KAAKpB,MAAhB6C,OACFqB,EAAmB9C,KAAKmC,sBAE9B,OACE,sBAAKtC,UAAU,YAAf,UACE,2CACA,cAAC,EAAD,CAAaF,SAAUK,KAAK0B,aAC5B,0CACA,cAAC,EAAD,CAAQpC,MAAOmC,EAAQjB,SAAUR,KAAKkC,eACtC,cAAC,EAAD,CACEjB,SAAU6B,EACVhC,gBAAiBd,KAAK+B,wB,GApEdpB,aA2EHa,IC5EfuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7c22ec8e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1aCPV\",\"input\":\"Filter_input__1LO_T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1E5IK\",\"label\":\"ContactForm_label__1WPda\",\"input\":\"ContactForm_input__3yXNW\",\"button\":\"ContactForm_button__2xVXV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__r3yt-\",\"noContacts\":\"ContactList_noContacts__1Ann0\",\"list\":\"ContactList_list__PYdsb\",\"button\":\"ContactList_button__RSRs3\"};","import { Component } from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.scss';\n\nexport class ContactForm extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form className={s.form} onSubmit={this.handleSubmit}>\n        <label className={s.label} htmlFor={this.nameInputId}>\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={this.handleChange}\n            id={this.nameInputId}\n          />\n        </label>\n        <label className={s.label} htmlFor={this.numberInputId}>\n          Number\n          <input\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            value={this.state.number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={this.handleChange}\n            id={this.numberInputId}\n          />\n        </label>\n        <button className={s.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.scss';\nconst Contact = ({ contact, onDeleteContact }) => (\n  <>\n    <span>\n      {contact.name}: {contact.number}\n    </span>\n    <button className={s.button} type=\"button\" onClick={onDeleteContact}>\n      Delete\n    </button>\n  </>\n);\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default Contact;\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.scss';\nimport Contact from './Contact';\n\nfunction ContactList({ contacts, onDeleteContact }) {\n  return contacts.length === 0 ? (\n    <div className={s.noContacts}>You haven't contacts!</div>\n  ) : (\n    <ul className={s.item}>\n      {contacts.map(contact => (\n        <li className={s.list} key={contact.id}>\n          <Contact\n            contact={contact}\n            onDeleteContact={() => onDeleteContact(contact.id)}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.scss';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <>\n      <label className={s.label}>\n        Find contact by name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={value}\n          onChange={onChange}\n        />\n      </label>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport './App.css';\nimport shortid from 'shortid';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevState, prevProps) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    const { contacts } = this.state;\n    const newContacts = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    contacts.find(\n      contact => newContacts.name.toLowerCase() === contact.name.toLowerCase(),\n    )\n      ? alert(`${newContacts.name} is already in contacts`)\n      : this.setState(({ contacts }) => ({\n          contacts: [newContacts, ...contacts],\n        }));\n  };\n\n  deleteContacts = contactsId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactsId),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  getFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const filteredContacts = this.getFilteredContacts();\n\n    return (\n      <div className=\"container\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList\n          contacts={filteredContacts}\n          onDeleteContact={this.deleteContacts}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}